/*

Есть модуль Math, который покрывает матекматику до 11 класса с головой

Примитивные типы

byte   – 1 байт, диапазон –128…127
Пример: byte b = 127;
Когда использовать: экономия памяти (массивы байтов, файлы, изображения)

short  – 2 байта, диапазон –32 768…32 767
Пример: short s = 32_000;
Когда использовать: редко, в low-level задачах, графике, играх

int    – 4 байта, диапазон –2 147 483 648…2 147 483 647
Пример: int i = 1_000_000;
Когда использовать: стандарт для счётчиков, ID, размеров и т. д.

long   – 8 байт, диапазон ±9 223 372 036 854 775 808
Пример: long l = 9_000_000_000L;
Когда использовать: timestamps, большие ID, финансовые расчёты

float  – 4 байта, точность ≈7 значащих цифр
Пример: float f = 3.14f;
Когда использовать: игры, 3D-графика, когда важна скорость и малый размер

double – 8 байт, точность ≈15 значащих цифр
Пример: double d = 3.14159265359;
Когда использовать: научные и финансовые расчёты, по умолчанию для дробей

char   – 2 байта, значение 0…65 535 (UTF-16 символ)
Пример: char c = ‘A’;
Когда использовать: один символ (буква, знак, emoji)

boolean– логический, принимает true или false
Пример: boolean ok = true;
Когда использовать: флаги, условия, логика (isReady, hasError)

Ссылочные типы

String      – неизменяемая строка
Пример: String s = “Привет”;
Методы: s.length(), s.indexOf(), s.substring() и т. д.

Массив       – фиксированная длина, простой контейнер
Пример: int[] a = new int[10];
int[] b = {1,2,3};

List      – динамический список
Пример: List nums = new ArrayList<>();

Set       – множество уникальных элементов
Пример: Set tags = new HashSet<>();

Map<K,V>     – коллекция «ключ → значение»
Пример: Map<String, User> m = new HashMap<>();

Пользовательский класс
Пример: Person p = new Person(“Ivan”);

Советы
	•	Если размер коллекции меняется, выбирайте List или Set, а не массив.
	•	Для поиска по ключу используйте Map.
	•	Для неизменяемых структур отдавайте предпочтение List.of(…), Set.of(…).
	•	В API и фреймворках часто нужны обёртки (Integer, Long) вместо примитивов.

*/